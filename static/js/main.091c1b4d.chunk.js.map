{"version":3,"sources":["components/SearchBar.js","components/ImageArea.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","_ref","onInputChange","onFormSubmit","value","react_default","a","createElement","onSubmit","className","style","width","onChange","type","placeholder","ImageArea","imageUrl","celebName","showName","src","alt","height","name","app","Clarifai","App","apiKey","state","input","detectFaces","data","outputs","regions","concepts","console","log","e","_this","setState","target","displayName","isLoading","preventDefault","models","predict","then","res","catch","err","components_SearchBar","this","components_ImageArea","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAuBeA,SArBG,SAAAC,GAA4C,IAAzCC,EAAyCD,EAAzCC,cAAeC,EAA0BF,EAA1BE,aAAcC,EAAYH,EAAZG,MAChD,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAUL,GACdE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,SACEH,MAAOA,EACPM,MAAO,CAAEC,MAAO,SAChBC,SAAUV,EACVO,UAAU,SACVI,KAAK,OACLC,YAAY,sBAEdT,EAAAC,EAAAC,cAAA,KAAGE,UAAU,iBAEfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBCNRM,EATG,SAAAd,GAAuC,IAApCe,EAAoCf,EAApCe,SAAUC,EAA0BhB,EAA1BgB,UAAWC,EAAejB,EAAfiB,SACxC,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKY,IAAKH,EAAUI,IAAI,GAAGT,MAAM,QAAQU,OAAO,UAC/CH,EAAWb,EAAAC,EAAAC,cAAA,iCAAyBU,EAAUK,MAAY,eCA3DC,EAAM,WAAIC,EAASC,KAAI,CAC3BC,OAAQ,qCA+DKD,6MA5DbE,MAAQ,CACNC,MAAO,GACPZ,SAAU,GACVC,UAAW,GACXC,UAAU,KAGZW,YAAc,SAAAC,GACZ,IAAMR,EAAOQ,EAAKC,QAAQ,GAAGD,KAAKE,QAAQ,GAAGF,KAAKG,SAAS,GAAGX,KAG9D,OAFAY,QAAQC,IAAIb,GAEL,CAAEA,WAGXpB,cAAgB,SAAAkC,GACdC,EAAKC,SAAS,CACZV,MAAOQ,EAAEG,OAAOnC,WAIpBoC,YAAc,SAAAvB,GACZoB,EAAKC,SAAS,CACZrB,YACAwB,WAAW,OAIftC,aAAe,SAAAiC,GACbA,EAAEM,iBACFL,EAAKC,SAAS,CACZV,MAAO,GACPZ,SAAUqB,EAAKV,MAAMC,MACrBV,UAAU,IAGZK,EAAIoB,OACDC,QAAQ,mCAAoCP,EAAKV,MAAMC,OACvDiB,KAAK,SAAAC,GAAG,OAAIT,EAAKG,YAAYH,EAAKR,YAAYiB,MAC9CC,MAAM,SAAAC,GAAG,OAAId,QAAQC,IAAIa,8EAG5B,OACE3C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAC0C,EAAD,CACE7C,MAAO8C,KAAKvB,MAAMC,MAClB1B,cAAegD,KAAKhD,cACpBC,aAAc+C,KAAK/C,eAErBE,EAAAC,EAAAC,cAAC4C,EAAD,CACElC,UAAWiC,KAAKvB,MAAMV,UACtBD,SAAUkC,KAAKvB,MAAMX,SACrBE,SAAUgC,KAAKvB,MAAMT,oBArDfkC,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.091c1b4d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchBar = ({ onInputChange, onFormSubmit, value }) => {\n  return (\n    <form onSubmit={onFormSubmit}>\n      <div className=\"ui category search\">\n        <div className=\"ui icon input\">\n          <input\n            value={value}\n            style={{ width: \"400px\" }}\n            onChange={onInputChange}\n            className=\"prompt\"\n            type=\"text\"\n            placeholder=\"Enter Url Here...\"\n          />\n          <i className=\"search icon\" />\n        </div>\n        <div className=\"results\" />\n      </div>\n    </form>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst ImageArea = ({ imageUrl, celebName, showName }) => {\n  return (\n    <div>\n      <img src={imageUrl} alt=\"\" width=\"500px\" height=\"500px\" />\n      {showName ? <p>I guess it would be: {celebName.name}</p> : null}\n    </div>\n  );\n};\n\nexport default ImageArea;\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar\";\nimport ImageArea from \"./components/ImageArea\";\nimport Clarifai from \"clarifai\";\n\nconst app = new Clarifai.App({\n  apiKey: \"8fe455a4afc64f18a6328da58b514029\"\n});\nclass App extends React.Component {\n  state = {\n    input: \"\",\n    imageUrl: \"\",\n    celebName: {},\n    showName: false\n  };\n\n  detectFaces = data => {\n    const name = data.outputs[0].data.regions[0].data.concepts[0].name;\n    console.log(name);\n\n    return { name };\n  };\n\n  onInputChange = e => {\n    this.setState({\n      input: e.target.value\n    });\n  };\n\n  displayName = celebName => {\n    this.setState({\n      celebName,\n      isLoading: true\n    });\n  };\n\n  onFormSubmit = e => {\n    e.preventDefault();\n    this.setState({\n      input: \"\",\n      imageUrl: this.state.input,\n      showName: true\n    });\n\n    app.models\n      .predict(\"e466caa0619f444ab97497640cefc4dc\", this.state.input)\n      .then(res => this.displayName(this.detectFaces(res)))\n      .catch(err => console.log(err));\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"search\">\n          <SearchBar\n            value={this.state.input}\n            onInputChange={this.onInputChange}\n            onFormSubmit={this.onFormSubmit}\n          />\n          <ImageArea\n            celebName={this.state.celebName}\n            imageUrl={this.state.imageUrl}\n            showName={this.state.showName}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}